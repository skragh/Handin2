// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Opgave2;

namespace Opgave2.Migrations
{
    [DbContext(typeof(MuncipalityDbContext))]
    [Migration("20211112103114_InitialMigration2")]
    partial class InitialMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("Opgave2.Addresses", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("postalCode")
                        .HasMaxLength(4)
                        .HasColumnType("INTEGER");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("AddressId");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("Opgave2.Locations", b =>
                {
                    b.Property<int>("locationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("municipalityzipCode")
                        .HasColumnType("INTEGER");

                    b.HasKey("locationId");

                    b.HasIndex("AddressId");

                    b.HasIndex("municipalityzipCode");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("Opgave2.Memberships", b =>
                {
                    b.Property<int>("membershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isChairman")
                        .HasColumnType("INTEGER");

                    b.Property<string>("personcpr")
                        .HasColumnType("TEXT");

                    b.Property<string>("societycvr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("membershipId");

                    b.HasIndex("personcpr");

                    b.HasIndex("societycvr");

                    b.ToTable("memberships");
                });

            modelBuilder.Entity("Opgave2.Municipalities", b =>
                {
                    b.Property<int>("zipCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("zipCode");

                    b.ToTable("municipalities");
                });

            modelBuilder.Entity("Opgave2.Persons", b =>
                {
                    b.Property<string>("cpr")
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("cpr");

                    b.HasIndex("AddressId");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("Opgave2.Properties", b =>
                {
                    b.Property<int>("propertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoomBookingsroomBookingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("locationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("propertyId");

                    b.HasIndex("RoomBookingsroomBookingId");

                    b.HasIndex("locationId");

                    b.ToTable("properties");
                });

            modelBuilder.Entity("Opgave2.RoomBookings", b =>
                {
                    b.Property<int>("roomBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("societiecvr")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("timespanId")
                        .HasColumnType("INTEGER");

                    b.HasKey("roomBookingId");

                    b.HasIndex("societiecvr");

                    b.HasIndex("timespanId");

                    b.ToTable("roomBookings");
                });

            modelBuilder.Entity("Opgave2.Rooms", b =>
                {
                    b.Property<int>("roomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("locationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("roomId");

                    b.HasIndex("locationId");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("Opgave2.Societies", b =>
                {
                    b.Property<string>("cvr")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("activity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("municipalityzipCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("cvr");

                    b.HasIndex("AddressId");

                    b.HasIndex("municipalityzipCode");

                    b.ToTable("societies");
                });

            modelBuilder.Entity("Opgave2.Timespans", b =>
                {
                    b.Property<int>("timespanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("closingTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("openingTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("roomId")
                        .HasColumnType("INTEGER");

                    b.HasKey("timespanId");

                    b.HasIndex("roomId");

                    b.ToTable("timespans");
                });

            modelBuilder.Entity("Opgave2.Locations", b =>
                {
                    b.HasOne("Opgave2.Addresses", "address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Opgave2.Municipalities", "municipality")
                        .WithMany("locations")
                        .HasForeignKey("municipalityzipCode");

                    b.Navigation("address");

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("Opgave2.Memberships", b =>
                {
                    b.HasOne("Opgave2.Persons", "person")
                        .WithMany()
                        .HasForeignKey("personcpr");

                    b.HasOne("Opgave2.Societies", "society")
                        .WithMany("memberships")
                        .HasForeignKey("societycvr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("person");

                    b.Navigation("society");
                });

            modelBuilder.Entity("Opgave2.Persons", b =>
                {
                    b.HasOne("Opgave2.Addresses", "address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("address");
                });

            modelBuilder.Entity("Opgave2.Properties", b =>
                {
                    b.HasOne("Opgave2.RoomBookings", null)
                        .WithMany("properties")
                        .HasForeignKey("RoomBookingsroomBookingId");

                    b.HasOne("Opgave2.Locations", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("Opgave2.RoomBookings", b =>
                {
                    b.HasOne("Opgave2.Societies", "societie")
                        .WithMany("roomBookings")
                        .HasForeignKey("societiecvr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opgave2.Timespans", "timespan")
                        .WithMany()
                        .HasForeignKey("timespanId");

                    b.Navigation("societie");

                    b.Navigation("timespan");
                });

            modelBuilder.Entity("Opgave2.Rooms", b =>
                {
                    b.HasOne("Opgave2.Locations", "location")
                        .WithMany()
                        .HasForeignKey("locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("Opgave2.Societies", b =>
                {
                    b.HasOne("Opgave2.Addresses", "address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Opgave2.Municipalities", "municipality")
                        .WithMany("societies")
                        .HasForeignKey("municipalityzipCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("address");

                    b.Navigation("municipality");
                });

            modelBuilder.Entity("Opgave2.Timespans", b =>
                {
                    b.HasOne("Opgave2.Rooms", "room")
                        .WithMany("timespans")
                        .HasForeignKey("roomId");

                    b.Navigation("room");
                });

            modelBuilder.Entity("Opgave2.Municipalities", b =>
                {
                    b.Navigation("locations");

                    b.Navigation("societies");
                });

            modelBuilder.Entity("Opgave2.RoomBookings", b =>
                {
                    b.Navigation("properties");
                });

            modelBuilder.Entity("Opgave2.Rooms", b =>
                {
                    b.Navigation("timespans");
                });

            modelBuilder.Entity("Opgave2.Societies", b =>
                {
                    b.Navigation("memberships");

                    b.Navigation("roomBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
